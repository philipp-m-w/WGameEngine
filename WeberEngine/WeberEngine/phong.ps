/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	int lightCount;
    float4[] lightColors;
    float3[] lightDirections;
	float3[] lightPositions;
};

cbuffer MaterialBuffer
{
	float n; //phong exponent of the material
	float3 k_s; // the specular material parameter in RGB
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
	float3 cam_world_pos;
	//world position of the pixel
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 PhongPixelShader(PixelInputType input) : SV_TARGET
{
	float4 outputColor;
	outputColor.a = 0.0;
	float4 textureColor = shaderTexture.Sample(SampleType, input.tex);
	float3 k_d = textureColor.xyz;

	float3 V = normalize(cam_world_pos - position.xyz);
	//TODO: reflect??
	float3 R = normalize(reflect(V, normal));

	[loop]
	for (uint i = 0; i < light_count; i++)
	{
		vec3 L = normalize(lightPositions[i] - position);
		vec3 multiplicator = k_d * max(0.0, dot(L, world_normal_interpolated)) + k_s * pow(max(0.0, dot(R, L)), n);
		float divisor = saturate(dot((position - lightPosition[i]), (position - lightPosition[i])));
		outputColor.rgb += (multiplicator * (lightColor[i] / divisor), 1.0);
	}
	outputColor.rgb = (outputColor.rgb / light_count);
}